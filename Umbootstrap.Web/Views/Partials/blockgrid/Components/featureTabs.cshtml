@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using Umbraco.Cms.Core.Models.Blocks;

@{
    Layout = "_Layout_Features.cshtml";
}

<!--
1. The Block Grid item featureTabs calls the Element Type featureComponentTabs in a composition
2. featureComponentTabs has a property featurePropertyTabs that calls a Block List DataType:
Feature Component - Tabs - Feature Property Tabs - Block List
3. The Block List DataType has a Block that calls the Element Type featureComponentTab
4. featureComponentTab has 2 properties:
a - featurePropertyTabTitle
b - featurePropertyTabContent
5. featurePropertyTabContent calls a Block List DataType:
Feature Component - Tabs - Feature Property Tab Content - Block List
6. The Block List DataType has two blocks:
a - text
b - image
 -->

@{
    var content = Model.Content;
    var tabItems = content.Value<IEnumerable<BlockListItem>>("FeaturePropertyTabs")?.ToList();
}

<div class="card">
    @if (tabItems != null && tabItems.Any())
    {
        <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs" id="n@(content.Key.ToString("N"))" role="tablist">
                @foreach (var tab in tabItems.Select(tabItem => tabItem.Content))
                {
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(tab.Key == tabItems.First().Content.Key ? "active" : "")" id="n@(tab.Key.ToString("N"))-tab" data-bs-toggle="tab" data-bs-target="#n@(tab.Key.ToString("N"))"
                                type="button" role="tab" aria-controls="n@(tab.Key.ToString("N"))" aria-selected="@(tab.Key == tabItems.First().Content.Key ? "true" : "false")">
                            @tab.Value("featurePropertyTabTitle")
                        </button>
                    </li>
                }
            </ul>
        </div>
        <div class="tab-content card-body" id="n@(content.Key.ToString("N"))">
            @foreach (var tab in tabItems.Select(tabItem => tabItem.Content))
            {
                <div class="tab-pane @(tab.Key == tabItems.First().Content.Key ? "active" : "")" id="n@(tab.Key.ToString("N"))" role="tabpanel" aria-labelledby="n@(tab.Key.ToString("N"))-tab">

                    @{
                        // get the content of the tab
                        var tabContent = tab.Value<IEnumerable<BlockListItem>>("featurePropertyTabContent")?.ToList();
                    }

                    @if (tabContent != null)
                    {
                        <div class="d-flex flex-column gap-3">
                            @foreach (var tabContentItem in tabContent.Select(tabContentItem => tabContentItem.Content))
                            {
                                <div class="feature">
                                    @if (!string.IsNullOrEmpty(tabContentItem.Value<string>("richtextcontent")) || tabContentItem.HasValue("image"))
                                    // if richtextcontent is not empty or image is not empty
                                    {

                                        // if featurePropertyFeatureTitle is not empty
                                        if (tabContentItem.HasValue("featurePropertyFeatureTitle"))
                                        {
                                            <h3 class="card-title">@tabContentItem.Value("featurePropertyFeatureTitle")</h3>
                                        }
                                        // if featurePropertyFeatureDescription is not empty
                                        if (tabContentItem.HasValue("featurePropertyFeatureDescription"))
                                        {
                                            <p class="lead">@tabContentItem.Value("featurePropertyFeatureDescription")</p>
                                        }
                                        // if richtextcontent is not empty
                                        if (tabContentItem.HasValue("richtextcontent"))
                                        {
                                            @tabContentItem.Value("richtextcontent")
                                        }
                                        // if it's an image use this:
                                        @if (tabContentItem.HasValue("image"))
                                        {
                                            <img src="@(tabContentItem.Value<IPublishedContent>("image")?.Url())" style="object-fit: cover; width: 100%; height: 100%;" />
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>



